stages:
  - build
  - pre_deploy
  - deploy

build_backend_api:
  stage: build
  image: openjdk:8-jdk
  before_script:
    - chmod +x ./backend/api/gradlew
  script:
    - cd backend/api && ./gradlew clean build
  artifacts:
    when: always
    paths:
    - backend/api/build/libs
    - backend/api/build/reports
  # Note on caching:
  # We should not rely upon the cache, as it is done on a best effort basis,
  # i.e., no cache if run on different runners
  cache:
    key: "cache-$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG" # per branch caching
    untracked: true
    paths:
      - $GRADLE_USER_HOME/caches/
      - $GRADLE_USER_HOME/wrapper/
      - $GRADLE_USER_HOME/build-cache/


build_mobile_apps_android:
  stage: build
  image: registry.gitlab.com/lemra/awesomedev/flutter:latest
  script:
    - flutter build apk
  artifacts:
    when: always
    paths:
    - build/app/outputs/

# TODO
build_mobile_apps_ios:
  stage: build
  image: registry.gitlab.com/lemra/awesomedev/flutter:latest # TODO Find a way to include IOS Dev tools in the image
  script:
    - flutter build ios || echo "TODO | Not Implemented as yet"
  artifacts:
    when: always
    paths:
    - build/app/outputs/


################################################################################
# Production deployments (only on master).
#
# For deployment, few environment variables are required:
# - SSH_PRIVATE_KEY
# - SSH_SERVER_HOSTKEYS
################################################################################
#
# Template anchor: configures the SSH client,
# so it can safely connect to the deploy server
#
.production_job_template: &production_job_definition
  image: registry.gitlab.com/lemra/router-companion-android/production_deployments:latest
  only:
    - master
  environment: production
  before_script:
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - '[[ -f /.dockerenv ]] && echo "$SSH_SERVER_HOSTKEYS" >> ~/.ssh/known_hosts'

#
# Preparation job: Syncs only the necessary files that wil be used by the actual deploy jobs
#
prepare_production_environment:
  <<: *production_job_definition
  stage: pre_deploy
  script:
    - ssh -p 1022 ci@rm3l.org "mkdir -p /home/ci/awesome_dev"
    - rsync -ravz -e 'ssh -p 1022'
          --exclude='.git/'
          --exclude='.gitlab-ci.yml'
          --exclude='.gradle'
          --delete-excluded ./docker-compose.yml
          --delete-excluded ./backend
        ci@rm3l.org:/home/ci/awesome_dev

#
# Deploy Backend GraphQL API containers
#
production_backend_api:
  <<: *production_job_definition
  stage: deploy
  dependencies:
    - build_backend_api
  script:
    - ssh -p 1022 ci@rm3l.org "cd /home/ci/awesome_dev && docker-compose -p awesome-dev pull && docker-compose -p awesome-dev up -d --build --remove-orphans"

